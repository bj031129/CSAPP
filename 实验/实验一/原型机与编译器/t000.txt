12
#---输入指令:1:	(I,	_,	_,	a	)
in R1			#输入一个值
movi 0 			#将变量的内存地址值赋值到R0
movb R0,R1 		#将R1的值赋值给变量所在的内存地址
#---输入指令:2:	(I,	_,	_,	b	)
in R1			#输入一个值
movi 1 			#将变量的内存地址值赋值到R0
movb R0,R1 		#将R1的值赋值给变量所在的内存地址
#---除法指令:3:	(/,	a,	b,	T1	)
movi 0 			#除法指令，变量a的内存地址放入R0
movc R1,R0 		#除法指令，变量a从内存地址R0拷贝至R1
movi 7 			#除法指令，临时内存空间地址放R0
movb R0,R1  		#除法指令，变量a放入临时内存空间地址
movi 1 			#除法指令，变量b的内存地址放入R0
movc R1,R0 		#除法指令，变量b从内存地址R0拷贝至R1
movi 8 			#除法指令，临时内存空间地址放R0
movb R0,R1  		#除法指令，变量b放入临时内存空间地址
#开始做除法循环
movi 7 			#a的内存地址存至R0
movc R1,R0			#从内存中取出值a至R1
movi 8 			#b的内存地址存至R0
movc R2,R0			#从内存中取出值b
sub R1,R2			#a-b，此时设置G值
movi 7 			#a的内存地址存至R0
movb R0,R1			#a-b值需要写回去
movi 9 			#结果的内存地址存至R0
movc R2,R0			#取出结果值
movi 1  			#R0设置为1
add R2,R0			#结果的值加1
movi 9 			#结果的内存地址存至R0
movb R0,R2			#将结果存回去
movd 			#保存当前的PC值到R3
movi -13 			#R0的值设置为-13
add R3,R0  			#R3的值加-13
jg 			#如果第13行的减法设置G为1,就跳转
#循环结束
movi 7 			#a的内存地址存至R0
movc R1,R0			#从内存中取出值a至R1
movi 0					#将R0设置为0
sub R0,R1			#用0来减去R1，即判断a-n*b是否为负数，此时设置G值
movd 			#保存当前的PC值到R3
movi 6 			##R0的值设置为6，即如果大于，则跳转到38行mova R1,R0
add R3,R0  			#R3的值加6
movi -1 			##需要减1
jg 			#如果第13行的减法设置G为1,就跳转
movi 0 			##不需要减1
mova R1,R0	#保存R0值
movi 9 			#结果的内存地址存至R0
movc R2,R0			#从内存中取出结果至R2
add R1,R2			#是否需要减1
movb R0,R1			#写回
movi 9			# 做除法，将临时结果的内存地址值赋值到R0
movc R2,R0			#取出a/b的结果值
movi 3			# 做除法，将结果的内存地址值赋值到R0
movb R0,R2			#将结果值写回内存
#---赋值指令:4:	(=,	T1,	_,	c	)
movi 3 			#将变量b的内存地址值赋值到R0
movc R1,R0		#从内存中取出b的值到R1
movi 2			#将变量a的内存地址值赋值到R0
movb R0,R1 		#将R1的值（即b）赋值给a所在的内存地址
#---输出指令:5:	(O,	_,	_,	c	)
movi 2			#将变量的内存地址赋值给R0
movc R1,R0		#将变量的值从内存送到寄存器R1
out R1			#输出变量的值
mova R0,R0 		#空指令
halt
